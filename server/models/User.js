import mongoose from 'mongoose';
const { Schema, model } = mongoose;

import bcrypt from 'bcrypt';

const userSchema = new Schema(
  {
    username: {
      type: String,
      required: true,
      unique: true,
      trim: true,
    },

    email: {
      type: String,
      required: true,
      unique: true,
      trim: true,
    },

    firstname: {
      type: String,
      trim: true,
      required: true,
    },

    lastname: {
      type: String,
      trim: true,
      required: true,
    },

    password: {
      type: String,
      required: true,
      minlength: 5,
    },

    friends: [
      {
        type: Schema.Types.ObjectId,
        ref: 'User',
      },
    ],

    avatar: {
      type: String,
    },

    characters: [{ type: Schema.Types.ObjectId, ref: 'Character' }],

    campaigns: [{ type: Schema.Types.ObjectId, ref: 'Campaign' }],
    autogenerated: { type: Boolean, default: false },
    friendRequestsIncoming: [{ type: Schema.Types.ObjectId, ref: 'User' }],
    friendRequestsOutgoing: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  },
  {
    toJSON: {
      virtuals: true,
    },
  }
);

userSchema.virtual('name').get(function () {
  return `${this.firstname} ${this.lastname}`;
});

// set up pre-save middleware to create password
userSchema.pre('save', async function (next) {
  if (this.isNew || this.isModified('password')) {
    const saltRounds = 10;
    this.password = await bcrypt.hash(this.password, saltRounds);
  }

  next();
});

// compare the incoming password with the hashed password
userSchema.methods.isCorrectPassword = async function (password) {
  return bcrypt.compare(password, this.password);
};

const User = model('User', userSchema);

export default User;
